def education_depression_relationship(data: pd.DataFrame):
    data = data[["education_level", "depressed"]]
    education_level = data[["education_level"][0]]
    depression_status = data[["depressed"][0]]
    plt.hist(education_level, bins=40, color='green', alpha=0.5, label='Non-depressed')
    plt.hist([education_level[i] for i in range(len(depression_status)) if depression_status[i] == 1],
             bins=40, color='blue', alpha=0.5, label='Depressed')
    plt.xlabel("Education Level")
    plt.ylabel("Number of people")
    plt.tight_layout()
    plt.savefig("education.png")
    percentage = get_education_percent(education_level, depression_status)
    print(percentage)
    sns.lineplot(data=percentage, x="education_level", y="percentage")
    plt.savefig("percent.png")


def get_education_percent(data, depression):
    depression_num = [0] * 20
    total_num = [0] * 20
    percentage = [0] * 20
    for i in range(len(data)):
        if depression[i] == 1:
            depression_num[data[i]] += 1
        total_num[data[i]] += 1
    for i in range(len(depression_num)):
        if total_num[i] != 0:
            percentage[i] = depression_num[i] / total_num[i]
    data = {'percentage': percentage,
            'education_level': list(range(1, 21))}
    return data
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
sns.set()


def money_depression_relationship(data: pd.DataFrame):
    data = data[["gained_asset", "depressed", "durable_asset", "save_asset"]]
    gained_asset = data[["gained_asset"][0]]
    depression_status = data[["depressed"][0]]
    durable_asset = data[["durable_asset"][0]]
    save_asset = data[["save_asset"][0]]
    total = data[["gained_asset"][0]] + data[["depressed"][0]] + data[["save_asset"][0]]
    fig, [[ax1, ax2], [ax3, ax4]] = plt.subplots(nrows=2, ncols=2)
    ax1.hist(gained_asset, bins=25, color='green', alpha=0.5, label='Non-depressed')
    ax1.hist([gained_asset[i] for i in range(len(depression_status)) if depression_status[i] == 1],
             bins=25, color='blue', alpha=0.5, label='Depressed')
    ax1.set_xlabel('gained_asset')
    ax1.set_ylabel('Depressed')
    ax2.hist(durable_asset, bins=25, color='green', alpha=0.5, label='Non-depressed')
    ax2.hist([durable_asset[i] for i in range(len(depression_status)) if depression_status[i] == 1],
             bins=25, color='blue', alpha=0.5, label='Depressed')
    ax2.set_xlabel('durable_asset')
    ax2.set_ylabel('Depressed')
    ax3.hist(save_asset, bins=25, color='green', alpha=0.5, label='Non-depressed')
    ax3.hist([save_asset[i] for i in range(len(depression_status)) if depression_status[i] == 1],
             bins=25, color='blue', alpha=0.5, label='Depressed')
    ax3.set_xlabel('save_asset')
    ax3.set_ylabel('Depressed')
    ax4.hist(total, bins=25, color='green', alpha=0.5, label='Non-depressed')
    ax4.hist([total[i] for i in range(len(depression_status)) if depression_status[i] == 1],
             bins=25, color='blue', alpha=0.5, label='Depressed')
    ax4.set_xlabel('total')
    ax4.set_ylabel('Depressed')
    plt.tight_layout()
    plt.savefig("asset_depression.png")
    fig, ax = plt.subplots(3)
    data = get_precent(gained_asset, depression_status)
    sns.lineplot(data=data, x="income", y="percentage", ax=ax[0])
    ax1.set_xlabel('Gained asset')
    ax1.set_ylabel('Depressed Percentage')
    data = get_precent(durable_asset, depression_status)
    sns.lineplot(data=data, x="income", y="percentage", ax=ax[1])
    ax2.set_xlabel('Durable asset')
    ax2.set_ylabel('Depressed Percentage')
    data = get_precent(save_asset, depression_status)
    sns.lineplot(data=data, x="income", y="percentage", ax=ax[2])
    ax3.set_xlabel('Save asset')
    ax3.set_ylabel('Depressed Percentage')
    plt.tight_layout()
    plt.savefig("percentage_asset")


def get_precent(data, depression):
    depression_num = [0, 0, 0, 0, 0]
    total_num = [0, 0, 0, 0, 0]
    percentage = [0, 0, 0, 0, 0]
    for i in range(len(data)):
        if depression[i] == 1:
            depression_num[round(data[i] // 20000000)] += 1
        total_num[round(data[i] // 20000000)] += 1
    for i in range(len(depression_num)):
        percentage[i] = depression_num[i] / total_num[i]
    data = {'percentage': percentage,
            'income': [20000000, 40000000, 60000000, 80000000, 100000000]}
    return data


def education_freq(df):
    pd.crosstab(df.education_level, df.depressed).plot(kind="bar", figsize=(20, 6))
    plt.title('Depressed Frequency for education level')
    plt.xlabel('education level')
    plt.ylabel('Age')
    plt.savefig('depressedVsEducation.png')
    plt.show()


def sex_freq(df):
    pd.crosstab(df.sex, df.depressed).plot(kind="bar", figsize=(15, 6), color=['#1CA53B', '#AA1111'])
    plt.title('Depressed Frequency for Sex')
    plt.xlabel('Sex (0 = Female, 1 = Male)')
    plt.xticks(rotation=0)
    plt.legend(["Haven't Depressed", "Have Depressed"])
    plt.ylabel('Frequency')
    plt.show()


def logistic_model(df):
    df = df["sex", "save asset", "depressed"]
    df = df.dropna()
    x = df.loc[:, df.columns != 'depressed']
    x = pd.get_dummies(x)
    y = df.depressed
    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)


def main():
    data = pd.read_csv('dataset/b_depressed.csv')
    #money_depression_relationship(data)
    logistic_model(data)
    #sex_freq(data)
    #education_freq(data)


if __name__ == '__main__':
    main()
    
    
    
    
    
    
    
    
    
    
    

df.groupby("depressed").mean()




    df = df["sex", "save asset", "depressed"]
    df = df.dropna()
    features = df.loc[:, df.columns != 'depressed']
    features = pd.get_dummies(features)
    labels = df.depressed
    x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)
    logreg = LogisticRegression()
    logreg.fit(x_train, y_train)
    y_pred = logreg.predict(x_test)
    print(y_pred)
    cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
    print(cnf_matrix)
    target_names = ['without diabetes', 'with diabetes']
    print(classification_report(y_test, y_pred, target_names=target_names))
    y_pred_proba = logreg.predict_proba(x_test)[::, 1]
    fpr, tpr, _ = metrics.roc_curve(y_test, y_pred_proba)
    auc = metrics.roc_auc_score(y_test, y_pred_proba)
    plt.plot(fpr, tpr, label="data 1, auc=" + str(auc))
    plt.legend(loc=4)
    plt.show()

